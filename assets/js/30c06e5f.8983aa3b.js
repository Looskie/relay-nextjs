"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),d=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(t),y=a,m=p["".concat(u,".").concat(y)]||p[y]||c[y]||o;return t?r.createElement(m,i(i({ref:n},l),{},{components:t})):r.createElement(m,i({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=y;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},8170:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const o={title:"Lazy-loaded Queries"},i=void 0,s={unversionedId:"lazy-loaded-query",id:"lazy-loaded-query",title:"Lazy-loaded Queries",description:"Relay's",source:"@site/docs/lazy-loaded-query.md",sourceDirName:".",slug:"/lazy-loaded-query",permalink:"/docs/lazy-loaded-query",draft:!1,editUrl:"https://github.com/RevereCRE/relay-nextjs/edit/main/website/docs/lazy-loaded-query.md",tags:[],version:"current",frontMatter:{title:"Lazy-loaded Queries"},sidebar:"docs",previous:{title:"Configuring relay-nextjs",permalink:"/docs/configuration"},next:{title:"Relay Page API",permalink:"/docs/page-api"}},u={},d=[],l={toc:d},p="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Relay's\n",(0,a.kt)("a",{parentName:"p",href:"https://relay.dev/docs/api-reference/use-lazy-load-query/"},(0,a.kt)("inlineCode",{parentName:"a"},"useLazyLoadQuery")," API"),"\nlet us defer loading queries until a component is mounted. To render a loading\nstate while the query is pending the docs recommended adding a ",(0,a.kt)("inlineCode",{parentName:"p"},"<Suspense>"),"\nboundary. Next.js and ",(0,a.kt)("inlineCode",{parentName:"p"},"relay-nextjs")," both expect to be able to render on the\nserver and as of the time of writing React Suspense does not support server\nrendering. When using ",(0,a.kt)("inlineCode",{parentName:"p"},"withRelay")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"usePreloadedQuery")," we take care of adding\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"<Suspense>")," boundary for you but we cannot here."),(0,a.kt)("p",null,"To use ",(0,a.kt)("inlineCode",{parentName:"p"},"useLazyLoadQuery")," and render a ",(0,a.kt)("inlineCode",{parentName:"p"},"<Suspense>")," boundary you must create a\ndynamically rendered component that skips SSR. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"// src/components/user_stats.tsx\nimport type { userStats_Birthday } from 'queries/__generated__/userStats_Birthday.graphql';\nimport React, { Suspense, useCallback } from 'react';\nimport { graphql, useLazyLoadQuery } from 'react-relay';\n\nfunction UserBirthday({ uuid }: { uuid: string }) {\n  const query = useLazyLoadQuery<userStats_Birthday>(\n    graphql`\n      query userStats_Birthday($uuid: ID!) {\n        user(id: $uuid) {\n          birthday\n        }\n      }\n    `,\n    { uuid }\n  );\n\n  return <div>Birthday is {query.user.birthday}!</div>;\n}\n\nfunction UserStats({ uuid }: { uuid: string }) {\n  return (\n    <Suspense fallback=\"Loading...\">\n      <UserBirthday uuid={uuid} />\n    </Suspense>\n  );\n}\n\nexport default UserStats;\n")),(0,a.kt)("p",null,"Note that we have two components here: one that has a ",(0,a.kt)("inlineCode",{parentName:"p"},"<Suspense>")," boundary and\none that actually calls ",(0,a.kt)("inlineCode",{parentName:"p"},"useLazyLoadQuery"),". If these two were merged into the\nsame component there would be no boundary to catch ",(0,a.kt)("inlineCode",{parentName:"p"},"useLazyLoadQuery"),"\nsuspending!"),(0,a.kt)("p",null,"To render this component use the\n",(0,a.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/advanced-features/dynamic-import"},"Next.js ",(0,a.kt)("inlineCode",{parentName:"a"},"dynamic")," API"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"// src/pages/user_profile.tsx\nimport dynamic from 'next/dynamic';\n\nconst UserStats = dynamic(() => import('components/components/user_stats'), {\n  ssr: false,\n});\n\nfunction UserProfile({ uuid }: { uuid: string }) {\n  return (\n    <div>\n      {/* ... */}\n      <UserStats uuid={uuid} />\n    </div>\n  );\n}\n")))}c.isMDXComponent=!0}}]);