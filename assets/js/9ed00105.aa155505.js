(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{80:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(3),o=t(7),a=(t(0),t(88)),i={title:"Configuring relay-nextjs"},l={unversionedId:"configuration",id:"configuration",isDocsHomePage:!1,title:"Configuring relay-nextjs",description:"Installing relay-nextjs",source:"@site/docs/configuration.md",slug:"/configuration",permalink:"/relay-nextjs/docs/configuration",editUrl:"https://github.com/RevereCRE/relay-nextjs/edit/main/website/docs/configuration.md",version:"current",sidebar:"docs",previous:{title:"Installation and Setup",permalink:"/relay-nextjs/docs/installation-and-setup"},next:{title:"Lazy-loaded Queries",permalink:"/relay-nextjs/docs/lazy-loaded-query"}},c=[{value:"Installing <code>relay-nextjs</code>",id:"installing-relay-nextjs",children:[]},{value:"Routing Integration",id:"routing-integration",children:[{value:"Setting up the Relay Environment",id:"setting-up-the-relay-environment",children:[]},{value:"Configuring <code>_document</code>",id:"configuring-_document",children:[]},{value:"Configuring <code>_app</code>",id:"configuring-_app",children:[]}]},{value:"Usage in a Page",id:"usage-in-a-page",children:[]}],s={toc:c};function u(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"installing-relay-nextjs"},"Installing ",Object(a.b)("inlineCode",{parentName:"h2"},"relay-nextjs")),Object(a.b)("p",null,"Install using npm or your other favorite package manager:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},"npm install relay-nextjs\n")),Object(a.b)("h2",{id:"routing-integration"},"Routing Integration"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"relay-nextjs")," must be configured in both a custom ",Object(a.b)("inlineCode",{parentName:"p"},"_document")," and ",Object(a.b)("inlineCode",{parentName:"p"},"_app")," to\nproperly intercept and handle routing."),Object(a.b)("h3",{id:"setting-up-the-relay-environment"},"Setting up the Relay Environment"),Object(a.b)("p",null,"For basic information about the Relay environment please see the\n",Object(a.b)("a",{parentName:"p",href:"https://relay.dev/docs/getting-started/step-by-step-guide/#42-configure-relay-runtime"},"Relay docs"),"."),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"relay-nextjs")," was designed with both client-side and server-side rendering in\nmind. As such it needs to be able to use either a client-side or server-side\nRelay environment. The library knows how to handle which environment to use, but\nwe have to tell it how to create these environments. For this we will define two\nfunctions: ",Object(a.b)("inlineCode",{parentName:"p"},"getClientEnvironment")," and ",Object(a.b)("inlineCode",{parentName:"p"},"createServerEnvironment"),". Note the\ndistinction \u2014 on the client only one environment is ever created because there\nis only one app, but on the server we must create an environment per-render to\nensure the cache is not shared between requests."),Object(a.b)("p",null,"First let\u2019s define ",Object(a.b)("inlineCode",{parentName:"p"},"getClientEnvironment"),":"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"// lib/client_environment.ts\nimport { getRelaySerializedState } from 'relay-nextjs';\nimport { withHydrateDatetime } from 'relay-nextjs/date';\nimport { Environment, Network, Store, RecordSource } from 'relay-runtime';\n\nexport function createClientNetwork() {\n  return Network.create(async (params, variables) => {\n    const response = await fetch('/api/graphql', {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: params.text,\n        variables,\n      }),\n    });\n\n    const json = await response.text();\n    return JSON.parse(json, withHydrateDatetime);\n  });\n}\n\nlet clientEnv: Environment | undefined;\nexport function getClientEnvironment() {\n  if (typeof window === 'undefined') return null;\n\n  if (clientEnv == null) {\n    clientEnv = new Environment({\n      network: createClientNetwork(),\n      store: new Store(new RecordSource(getRelaySerializedState()?.records)),\n      isServer: false,\n    });\n  }\n\n  return clientEnv;\n}\n")),Object(a.b)("p",null,"and then ",Object(a.b)("inlineCode",{parentName:"p"},"createServerEnvironment"),":"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"import { graphql } from 'graphql';\nimport { withHydrateDatetime } from 'relay-nextjs/date';\nimport { GraphQLResponse, Network } from 'relay-runtime';\n\n// Relay is not prescriptive about how GraphQL requests are made.\n// This is an example showing how to request GraphQL data.\n// You should fill this in with how to make requests to your GraphQL\n// API of choice.\nimport { makeGraphQLRequest } from './my_graphql_api';\n\nexport function createServerNetwork() {\n  return Network.create(async (text, variables) => {\n    const results = await makeGraphQLRequest(text, variables);\n\n    const data = JSON.parse(\n      JSON.stringify(results),\n      withHydrateDatetime\n    ) as GraphQLResponse;\n\n    return data;\n  });\n}\n\n// Optional: this function can take a token used for authentication and pass it into `createServerNetwork`.\nexport function createServerEnvironment() {\n  return new Environment({\n    network: createServerNetwork(),\n    store: new Store(new RecordSource()),\n    isServer: true,\n  });\n}\n")),Object(a.b)("p",null,"Note in the example server environment we\u2019re executing against a local schema\nbut you may fetch from a remote API as well."),Object(a.b)("h3",{id:"configuring-_document"},"Configuring ",Object(a.b)("inlineCode",{parentName:"h3"},"_document")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"// src/pages/_document.tsx\nimport { createRelayDocument, RelayDocument } from 'relay-nextjs/document';\nimport NextDocument, { Html, Head, DocumentContext } from 'next/document';\n\ninterface DocumentProps {\n  relayDocument: RelayDocument;\n}\n\nclass MyDocument extends NextDocument<DocumentProps> {\n  static async getInitialProps(ctx: DocumentContext) {\n    const relayDocument = createRelayDocument();\n\n    const renderPage = ctx.renderPage;\n    ctx.renderPage = () =>\n      renderPage({\n        enhanceApp: (App) => relayDocument.enhance(App),\n      });\n\n    const initialProps = await NextDocument.getInitialProps(ctx);\n\n    return {\n      ...initialProps,\n      relayDocument,\n    };\n  }\n\n  render() {\n    const { relayDocument } = this.props;\n\n    return (\n      <Html>\n        <Head>\n          {/* ... */}\n          <relayDocument.Script />\n        </Head>\n        {/* ... */}\n      </Html>\n    );\n  }\n}\n")),Object(a.b)("h3",{id:"configuring-_app"},"Configuring ",Object(a.b)("inlineCode",{parentName:"h3"},"_app")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"// src/pages/_app.tsx\nimport { AppProps } from 'next/app';\nimport { RelayEnvironmentProvider } from 'react-relay/hooks';\nimport { getInitialPreloadedQuery, getRelayProps } from 'relay-nextjs/app';\nimport { getClientEnvironment } from '../lib/client_environment';\n\nconst clientEnv = getClientEnvironment();\nconst initialPreloadedQuery = getInitialPreloadedQuery({\n  createClientEnvironment: () => getClientEnvironment()!,\n});\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  const relayProps = getRelayProps(pageProps, initialPreloadedQuery);\n  const env = relayProps.preloadedQuery?.environment ?? clientEnv!;\n\n  return (\n    <>\n      <RelayEnvironmentProvider environment={env}>\n        <Component {...pageProps} {...relayProps} />\n      </RelayEnvironmentProvider>\n    </>\n  );\n}\n\nexport default MyApp;\n")),Object(a.b)("h2",{id:"usage-in-a-page"},"Usage in a Page"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-tsx"},"// src/pages/user/[uuid].tsx\nimport { withRelay, RelayProps } from 'relay-nextjs';\nimport { graphql, usePreloadedQuery } from 'react-relay/hooks';\n\n// The $uuid variable is injected automatically from the route.\nconst ProfileQuery = graphql`\n  query profile_ProfileQuery($uuid: ID!) {\n    user(id: $uuid) {\n      id\n      firstName\n      lastName\n    }\n  }\n`;\n\nfunction UserProfile({ preloadedQuery }: RelayProps<{}, profile_ProfileQuery>) {\n  const query = usePreloadedQuery(ProfileQuery, preloadedQuery);\n\n  return (\n    <div>\n      Hello {query.user.firstName} {query.user.lastName}\n    </div>\n  );\n}\n\nfunction Loading() {\n  return <div>Loading...</div>;\n}\n\nexport default withRelay(UserProfile, UserProfileQuery, {\n  // Fallback to render while the page is loading.\n  // This property is optional.\n  fallback: <Loading />,\n  // Create a Relay environment on the client-side.\n  // Note: This function must always return the same value.\n  createClientEnvironment: () => getClientEnvironment()!,\n  // Gets server side props for the page.\n  serverSideProps: async (ctx) => {\n    // This is an example of getting an auth token from the request context.\n    // If you don't need to authenticate users this can be removed and return an\n    // empty object instead.\n    const { getTokenFromCtx } = await import('lib/server/auth');\n    const token = await getTokenFromCtx(ctx);\n    if (token == null) {\n      return {\n        redirect: { destination: '/login', permanent: false },\n      };\n    }\n\n    return { token };\n  },\n  // Server-side props can be accessed as the second argument\n  // to this function.\n  createServerEnvironment: async (\n    ctx,\n    // The object returned from serverSideProps. If you don't need a token\n    // you can remove this argument.\n    { token }: { token: string }\n  ) => {\n    const { createServerEnvironment } = await import('lib/server_environment');\n    return createServerEnvironment(token);\n  },\n});\n")))}u.isMDXComponent=!0},88:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return y}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),u=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},m=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(t),m=r,y=p["".concat(i,".").concat(m)]||p[m]||d[m]||a;return t?o.a.createElement(y,l(l({ref:n},s),{},{components:t})):o.a.createElement(y,l({ref:n},s))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);