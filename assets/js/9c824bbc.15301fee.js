(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{79:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var r=t(3),a=t(7),i=(t(0),t(88)),o={title:"Relay Page API"},l={unversionedId:"page-api",id:"page-api",isDocsHomePage:!1,title:"Relay Page API",description:"withRelay",source:"@site/docs/page-api.md",slug:"/page-api",permalink:"/relay-nextjs/docs/page-api",editUrl:"https://github.com/RevereCRE/relay-nextjs/edit/main/website/docs/page-api.md",version:"current",sidebar:"docs",previous:{title:"Lazy-loaded Queries",permalink:"/relay-nextjs/docs/lazy-loaded-query"},next:{title:"Relay Document API",permalink:"/relay-nextjs/docs/document-api"}},c=[{value:"<code>withRelay</code>",id:"withrelay",children:[{value:"Arguments",id:"arguments",children:[]}]},{value:"<code>RelayOptions</code>",id:"relayoptions",children:[{value:"Properties",id:"properties",children:[]}]},{value:"<code>hydrateRelayEnvironment</code>",id:"hydraterelayenvironment",children:[]}],s={toc:c};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"withrelay"},Object(i.b)("inlineCode",{parentName:"h2"},"withRelay")),Object(i.b)("p",null,"Wraps a component, GraphQL query, and a set of options to manage loading the\npage and its data, as specified by the query. Example usage:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},"// src/pages/user/[uuid].tsx\nimport { withRelay, RelayProps } from 'relay-nextjs';\nimport { graphql, usePreloadedQuery } from 'react-relay/hooks';\n\n// The $uuid variable is injected automatically from the route.\nconst ProfileQuery = graphql`\n  query profile_ProfileQuery($uuid: ID!) {\n    user(id: $uuid) {\n      id\n      firstName\n      lastName\n    }\n  }\n`;\n\nfunction UserProfile({ preloadedQuery }: RelayProps<{}, profile_ProfileQuery>) {\n  const query = usePreloadedQuery(ProfileQuery, preloadedQuery);\n\n  return (\n    <div>\n      Hello {query.user.firstName} {query.user.lastName}\n    </div>\n  );\n}\n\nexport default withRelay(UserProfile, UserProfileQuery, options);\n")),Object(i.b)("h3",{id:"arguments"},"Arguments"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"component"),": A\n",Object(i.b)("a",{parentName:"li",href:"https://nextjs.org/docs/basic-features/pages"},"Next.js page component")," to\nrecieve the preloaded query from ",Object(i.b)("inlineCode",{parentName:"li"},"relay-nextjs"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"query"),": A GraphQL query using the ",Object(i.b)("inlineCode",{parentName:"li"},"graphql")," tag from Relay."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"options"),": A ",Object(i.b)("a",{parentName:"li",href:"#relayoptions"},Object(i.b)("inlineCode",{parentName:"a"},"RelayOptions"))," object.")),Object(i.b)("h2",{id:"relayoptions"},Object(i.b)("inlineCode",{parentName:"h2"},"RelayOptions")),Object(i.b)("p",null,"Interface for configuring ",Object(i.b)("inlineCode",{parentName:"p"},"withRelay"),". Example usage:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},"const options: RelayOptions<{ token: string }> = {\n  fallback: <Loading />,\n  fetchPolicy: 'store-and-network',\n  createClientEnvironment: () => getClientEnvironment()!,\n  serverSideProps: async (ctx) => {\n    const { getTokenFromCtx } = await import('lib/server/auth');\n    const token = await getTokenFromCtx(ctx);\n    if (token == null) {\n      return {\n        redirect: { destination: '/login', permanent: false },\n      };\n    }\n\n    return { token };\n  },\n  createServerEnvironment: async (ctx, { token }) => {\n    const { createServerEnvironment } = await import('lib/server_environment');\n    return createServerEnvironment(token);\n  },\n};\n")),Object(i.b)("h3",{id:"properties"},"Properties"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fallback?"),": React component to use as a loading indicator. See\n",Object(i.b)("a",{parentName:"li",href:"https://reactjs.org/docs/concurrent-mode-suspense.html"},"React Suspense docs"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"fetchPolicy?"),": Relay fetch policy. Defaults to ",Object(i.b)("inlineCode",{parentName:"li"},"store-and-network"),". See\n",Object(i.b)("a",{parentName:"li",href:"https://relay.dev/docs/guided-tour/reusing-cached-data/fetch-policies/"},"Relay docs"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"clientSideProps?"),": Provides props to the page on client-side navigations. Not\nrequired."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"createClientEnvironment"),": A function that returns a ",Object(i.b)("inlineCode",{parentName:"li"},"RelayEnvironment"),".\nShould return the same environment each time it is called."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"serverSideProps?"),": Fetch any server-side only props such as authentication\ntokens. Note that you should import server-only deps with\n",Object(i.b)("inlineCode",{parentName:"li"},"await import('...')"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"createServerEnvironment"),": A function that returns a ",Object(i.b)("inlineCode",{parentName:"li"},"RelayEnvironment"),". First\nargument is ",Object(i.b)("inlineCode",{parentName:"li"},"NextPageContext")," and the second is the object returned by\n",Object(i.b)("inlineCode",{parentName:"li"},"serverSideProps"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"variablesFromContext?"),": Function that extracts GraphQL query variables from\n",Object(i.b)("inlineCode",{parentName:"li"},"NextPageContext"),". Run on both the client and server. If omitted query\nvariables are set to ",Object(i.b)("inlineCode",{parentName:"li"},"ctx.query"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"serverSidePostQuery?"),": Function that is called during server side rendering\nafter fetching the query is finished. First parameter gives you access to the\ndata returned by your query and the second parameter gives access to\n",Object(i.b)("inlineCode",{parentName:"li"},"NextPageContext"),". This function can be used for example to set your response\nstatus to 404 if your query didn't return data.")),Object(i.b)("h2",{id:"hydraterelayenvironment"},Object(i.b)("inlineCode",{parentName:"h2"},"hydrateRelayEnvironment")),Object(i.b)("p",null,"Hydrates an existing Relay environment with data fetched during the server\nrender. Example usage:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-tsx"},"// lib/client_environment.ts\nimport { hydrateRelayEnvironment } from 'relay-nextjs';\nimport { withHydrateDatetime } from 'relay-nextjs/date';\nimport { Environment, Network, Store, RecordSource } from 'relay-runtime';\n\nexport function createClientNetwork() {\n  return Network.create(async (params, variables) => {\n    const response = await fetch('/api/graphql', {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: params.text,\n        variables,\n      }),\n    });\n\n    const json = await response.text();\n    return JSON.parse(json, withHydrateDatetime);\n  });\n}\n\nlet clientEnv: Environment | undefined;\nexport function getClientEnvironment() {\n  if (typeof window === 'undefined') return null;\n\n  if (clientEnv == null) {\n    clientEnv = new Environment({\n      network: createClientNetwork(),\n      store: new Store(new RecordSource()),\n      isServer: false,\n    });\n\n    hydrateRelayEnvironment(clientEnv);\n  }\n\n  return clientEnv;\n}\n")))}p.isMDXComponent=!0},88:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),p=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(t),b=r,m=u["".concat(o,".").concat(b)]||u[b]||d[b]||i;return t?a.a.createElement(m,l(l({ref:n},s),{},{components:t})):a.a.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=b;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);